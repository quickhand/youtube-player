{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;6BAAyB,eAAe;;;;0BAClB,aAAa;;6BACT,iBAAiB;;;;0BACpB,cAAc;;;;oCACJ,wBAAwB;;;;;;AAGzD,IAAI,aAAa,YAAA;IACb,gBAAgB,YAAA,CAAC;;AAErB,aAAa,GAAG,EAAE,CAAC;;AAEZ,SAAS,UAAU,GAAG;AACzB,oBAAgB,GAAG,wCAAsB,CAAC;AAC1C,WAAO,gBAAgB,CAAC;CAC3B;;;;;;;;;;;AAaD,aAAa,CAAC,WAAW,GAAG,UAAC,OAAO,EAAK;AACrC,QAAI,MAAM,YAAA,CAAC;;AAEX,UAAM,GAAG,EAAE,CAAC;;AAEZ,uEAAqB,UAAC,SAAS,EAAK;AAChC,YAAI,WAAW,YAAA,CAAC;;AAEhB,mBAAW,UAAQ,yCAAW,SAAS,CAAC,AAAE,CAAC;;AAE3C,cAAM,CAAC,WAAW,CAAC,GAAG,UAAC,KAAK,EAAK;AAC7B,mBAAO,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;SAClC,CAAC;KACL,CAAC,CAAC;;AAEH,WAAO,MAAM,CAAC;CACjB,CAAC;;;;;;;;;AASF,aAAa,CAAC,eAAe,GAAG,UAAC,cAAc,EAAK;AAChD,QAAI,SAAS,YAAA,CAAC;;AAEd,aAAS,GAAG,EAAE,CAAC;;AAEf,0EAAwB,UAAC,YAAY,EAAK;AACtC,iBAAS,CAAC,YAAY,CAAC,GAAG,YAAa;8CAAT,IAAI;AAAJ,oBAAI;;;AAC9B,mBAAO,cAAc,CAChB,IAAI,CAAC,UAAC,MAAM,EAAK;AACd,uBAAO,MAAM,CAAC,YAAY,OAAC,CAApB,MAAM,EAAkB,IAAI,CAAC,CAAC;aACxC,CAAC,CAAC;SACV,CAAC;KACL,CAAC,CAAC;;AAEH,WAAO,SAAS,CAAC;CACpB,CAAC;;;;;;;;;;;;;;;;;;;;AAmBK,SAAS,aAAa,CAAC,SAAS,EAAiB;QAAf,OAAO,yDAAG,EAAE;;AACjD,QAAI,OAAO,YAAA;QACP,SAAS,YAAA;QACT,cAAc,YAAA,CAAC;;AAEnB,aAAS,GAAG,EAAE,CAAC;AACf,WAAO,GAAG,gCAAkB,CAAC;;AAE7B,QAAI,OAAO,CAAC,MAAM,EAAE;AAChB,cAAM,IAAI,KAAK,yCAAyC,CAAC;KAC5D;;AAED,QAAI,OAAO,SAAS,aAAa,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;AACtE,cAAM,IAAI,KAAK,gBAAc,SAAS,uBAAoB,CAAC;KAC9D;;AAED,QAAG,gBAAgB,IAAI,IAAI,EAAE;AACzB,kBAAU,EAAE,CAAC;KAChB;;AAED,WAAO,CAAC,MAAM,GAAG,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;AAEpD,kBAAc,GAAG,wBAAY,UAAC,OAAO,EAAK;AACtC,wBAAgB,CACX,IAAI,CAAC,UAAC,EAAE,EAAK;AACV,mBAAO,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SAC5C,CAAC,CACD,IAAI,CAAC,UAAC,MAAM,EAAK;AACd,mBAAO,CAAC,EAAE,UAAU,YAAM;AACtB,uBAAO,CAAC,MAAM,CAAC,CAAC;aACnB,CAAC,CAAC;SACN,CAAC,CAAC;KACV,CAAC,CAAC;;AAEH,aAAS,GAAG,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;AAC1D,aAAS,CAAC,EAAE,GAAG,UAAC,SAAS,EAAE,EAAE,EAAE,OAAO,EAAK;AACvC,eAAO,CAAC,EAAE,CAAC,SAAS,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;KACtC,CAAC;;AAEF,WAAO,SAAS,CAAC;CACpB;;AAAA,CAAC","file":"index.js","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport {Promise} from 'es6-promise';\nimport functionNames from './functionNames';\nimport eventNames from './eventNames';\nimport loadYouTubeIframeAPI from './loadYouTubeIframeAPI';\nimport {capitalize, forEach as _forEach} from 'lodash';\n\nlet YouTubePlayer,\n    youtubeIframeAPI;\n\nYouTubePlayer = {};\n\nexport function preLoadAPI() {\n    youtubeIframeAPI = loadYouTubeIframeAPI();\n    return youtubeIframeAPI;\n}\n\n\n\n/**\n * Construct an object that defines an event handler for all of the\n * YouTube player events. Proxy captured events through an event emitter.\n *\n * @todo Capture event parameters.\n * @see https://developers.google.com/youtube/iframe_api_reference#Events\n * @param {EventEmmitter} emitter\n * @return {Object}\n */\nYouTubePlayer.proxyEvents = (emitter) => {\n    let events;\n\n    events = {};\n\n    _forEach(eventNames, (eventName) => {\n        let onEventName;\n\n        onEventName = `on${capitalize(eventName)}`;\n\n        events[onEventName] = (event) => {\n            emitter.emit(eventName, event);\n        };\n    });\n\n    return events;\n};\n\n/**\n * Delays player API method execution until player state is ready.\n *\n * @todo Proxy all of the methods using Object.keys.\n * @param {Promise} playerAPIReady Promise that resolves when player is ready.\n * @return {Object}\n */\nYouTubePlayer.promisifyPlayer = (playerAPIReady) => {\n    let functions;\n\n    functions = {};\n\n    _forEach(functionNames, (functionName) => {\n        functions[functionName] = (...args) => {\n            return playerAPIReady\n                .then((player) => {\n                    return player[functionName](...args);\n                });\n        };\n    });\n\n    return functions;\n};\n\n/**\n * @typedef options\n * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player\n * @param {Number} width\n * @param {Number} height\n * @param {String} videoId\n * @param {Object} playerVars\n * @param {Object} events\n */\n\n/**\n * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.\n *\n * @param {HTMLElement|String} elementId Either the DOM element or the id of the HTML element where the API will insert an <iframe>.\n * @param {YouTubePlayer~options} options\n * @return {Object}\n */\nexport function youTubePlayer(elementId, options = {})  {\n    let emitter,\n        playerAPI,\n        playerAPIReady;\n\n    playerAPI = {};\n    emitter = new EventEmitter();\n\n    if (options.events) {\n        throw new Error(`Event handlers cannot be overwritten.`);\n    }\n\n    if (typeof elementId === `string` && !document.getElementById(elementId)) {\n        throw new Error(`Element \"#${elementId}\" does not exist.`);\n    }\n\n    if(youtubeIframeAPI == null) {\n        preLoadAPI();\n    }\n\n    options.events = YouTubePlayer.proxyEvents(emitter);\n\n    playerAPIReady = new Promise((resolve) => {\n        youtubeIframeAPI\n            .then((YT) => {\n                return new YT.Player(elementId, options);\n            })\n            .then((player) => {\n                emitter.on(`ready`, () => {\n                    resolve(player);\n                });\n            });\n    });\n\n    playerAPI = YouTubePlayer.promisifyPlayer(playerAPIReady);\n    playerAPI.on = (eventName, fn, context) => {\n        emitter.on(eventName, fn, context);\n    };\n\n    return playerAPI;\n};\n"],"sourceRoot":"/source/"}